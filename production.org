#+TITLE: The kcats Programming Language (Production Implementation)
#+AUTHOR: Skyrod Vactai
#+BABEL: :cache yes
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:clojure :noweb yes :results value silent
#+TODO: TODO(t) INPROGRESS(i) | DONE(d) CANCELED(c)
* Production implementation
** Base Language
We will use Rust - it's fast and modern, its memory allocation model
seems well suited to kcats.
** Status
Experimental, currently learning a new language.
** Using
*** Dependencies
- rustc
- cargo
*** Build
Run =cargo build=, the binary will be placed in =./target/debug= by
default.
*** Run
Execute the binary: =./target/debug/kcats=. It will read a program
from stdin and execute it, then print the resulting stack.

** Project File
#+begin_src toml :tangle Cargo.toml
[package]
name = "kcats"
version = "0.1.1"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
#rug = "1.15.0"
edn-format = "3.2.3"
base64 = "0.13.0"
internment = "0.6.0" 
thiserror = "1.0.30"
lazy_static = "1.4.0"
num-integer = "0.1.44"

[dev-dependencies]
test-case = "2.0.0"
#+end_src
** Code
Let's start by defining some data structures in a separate module
#+begin_src rust :tangle src/types.rs
use internment::Intern;
use lazy_static::lazy_static;
use std::collections::{HashMap, VecDeque};
use std::fmt;
use std::hash::{Hash, Hasher};
use std::mem;
use std::ptr;
use std::rc::Rc;
//extern crate thiserror;

pub type Word = Intern<String>;

pub type List = VecDeque<Item>;

pub type KeyList = VecDeque<KeyItem>;

pub type Stack = List;

pub type Bytes = Vec<u8>;

pub type Int = i64;

pub type Float = f64;

pub type Association = HashMap<KeyItem, Item>;

#[derive(Clone, PartialEq)]
pub struct Error {
    pub data: Association,
}

lazy_static! {
    pub static ref S_ASSOC: Intern<String> = Intern::new("association".to_string());
    pub static ref S_BOOLEAN: Intern<String> = Intern::new("boolean".to_string());
    pub static ref S_BYTES: Intern<String> = Intern::new("bytes".to_string());
    pub static ref S_ENVIRONMENT: Intern<String> = Intern::new("environment".to_string());
    pub static ref S_FLOAT: Intern<String> = Intern::new("float".to_string());
    pub static ref S_INTEGER: Intern<String> = Intern::new("integer".to_string());
    pub static ref S_ITEM: Intern<String> = Intern::new("item".to_string());
    pub static ref S_LIST: Intern<String> = Intern::new("list".to_string());
    pub static ref S_NUMBER: Intern<String> = Intern::new("number".to_string());
    pub static ref S_PROGRAM: Intern<String> = Intern::new("program".to_string());
    pub static ref S_STRING: Intern<String> = Intern::new("string".to_string());
    pub static ref S_WORD: Intern<String> = Intern::new("word".to_string());
}

#[derive(Debug, Clone, PartialEq)]
pub enum Item {
    Int(Int),
    Float(Float),
    Boolean(bool),
    Bytes(Bytes),
    String(String),
    Word(Word),
    Assoc(Association),
    List(List),
    Env(Environment),
    AxiomDef(AxiomDef),
    DerivedDef(DerivedDef),
    Error(Error),
    Nothing,
}

#[derive(Debug, Clone, Eq, PartialEq, Hash)]
pub enum KeyItem {
    Int(Int),
    Boolean(bool),
    Bytes(Bytes),
    String(String),
    Word(Word),
    List(VecDeque<KeyItem>),
    Nothing,
}

pub type Dictionary = Association;

#[derive(Clone, PartialEq)]
pub struct Environment {
    pub stack: Stack,
    pub expression: Stack,
    pub dictionary: Dictionary,
}

pub type StepFn = dyn Fn(Environment) -> Environment;

#[derive(Clone)]
pub struct AxiomDef {
    pub word: Word,
    pub examples: Option<List>,
    pub spec: Option<List>,
    // whether or not to print this as a compiled word (false) or an
    // entire dictionary entry (true)
    pub serialize: bool,
    pub f: Rc<StepFn>,
}

#[derive(Debug, Clone, PartialEq)]
pub struct DerivedDef {
    pub word: Word,
    pub examples: Option<List>,
    pub spec: Option<List>,
    pub serialize: bool,
    pub definition: List,
}

// dictionary entries are equal if they have the same function reference,
// no need to compare the function values
impl PartialEq for AxiomDef {
    fn eq(&self, other: &Self) -> bool {
        self.word == other.word
            && self.examples == other.examples
            && self.spec == other.spec
            && ptr::eq(self.f.as_ref(), other.f.as_ref())
    }
}

impl Eq for AxiomDef {}

impl Hash for AxiomDef {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.word.hash(state);
    }
}

pub fn extend_front(l: &mut List, mut to_prepend: List) {
    mem::swap(l, &mut to_prepend);
    l.extend(to_prepend);
}

impl Environment {
    pub fn push(mut self, i: Item) -> Environment {
        self.stack.push_front(i);
        self
    }

    pub fn pop(&mut self) -> Item {
        self.stack.pop_front().unwrap()
    }

    pub fn append_expression(mut self, items: VecDeque<Item>) -> Environment {
        extend_front(&mut self.expression, items);
        self
    }
}

impl Error {
    fn create(asked: List, reason: &str) -> Error {
        Error {
            data: HashMap::from([
                (word_key("type"), word("error")),
                (word_key("asked"), Item::List(asked)),
                (word_key("reason"), Item::String(reason.to_string())),
            ]),
        }
    }

    pub fn stack_underflow() -> Error {
        Error::create(wrap(word("consume")), "not enough items on stack")
    }

    pub fn undefined(w: Word) -> Error {
        Error::create(wrap(Item::Word(w)), "word is not defined")
    }

    pub fn type_mismatch(asked: List) -> Error {
        Error::create(asked, "type mismatch")
    }

    pub fn expected(typestr: &str) -> Error {
        Error::type_mismatch(wrap(word(typestr)))
    }

    pub fn short_list(expected: Int) -> Error {
        Error::create(
            List::from_iter([word("count"), Item::Int(expected), word(">=")]),
            "list had too few items",
        )
    }

    pub fn list_count(expected: Int) -> Error {
        Error::create(
            List::from_iter([word("count"), Item::Int(expected), word("=")]),
            "list had wrong number of items",
        )
    }

    pub fn parse(reason: &str) -> Error {
        Error::create(wrap(word("read")), reason)
    }

    pub fn test_assertion(program: List, expected: List, actual: List) -> Error {
        let mut e = Error::create(program, "assertion failed");
        e.data.insert(word_key("expected"), Item::List(expected));
        e.data.insert(word_key("actual"), Item::List(actual));
        return e;
    }
}

pub fn wrap(i: Item) -> List {
    List::from_iter([i])
}

impl TryFrom<Item> for List {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        match i {
            Item::List(l) => Ok(l),
            Item::Assoc(a) => Ok(a
                .into_iter()
                .map(|(k, v)| Item::List(List::from(vec![to_value_item(k), Item::from(v)])))
                .collect::<List>()),
            _ => Err(Error::expected("list")),
        }
    }
}

impl TryFrom<Item> for AxiomDef {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        if let Item::AxiomDef(b) = i {
            Ok(b)
        } else {
            Err(Error::expected("AxiomWord"))
        }
    }
}

impl TryFrom<Item> for Int {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        if let Item::Int(i) = i {
            Ok(i)
        } else {
            Err(Error::expected("integer"))
        }
    }
}

impl TryFrom<Item> for Float {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        if let Item::Float(f) = i {
            Ok(f)
        } else {
            Err(Error::expected("float"))
        }
    }
}

impl TryFrom<Item> for String {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        if let Item::String(i) = i {
            Ok(i)
        } else {
            Err(Error::expected("string"))
        }
    }
}

impl TryFrom<Item> for Association {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        match i {
            Item::Assoc(a) => Ok(a),
            Item::List(l) => Ok(to_hash(l)?),
            Item::Nothing => Ok(Association::new()),
            Item::DerivedDef(d) => Ok(Association::from(d)),
            Item::AxiomDef(a) => Ok(Association::from(a)),
            Item::Env(e) => Ok(Association::from(e)),
            Item::Error(e) => Ok(Association::from(e)),
            _ => Err(Error::expected("association")),
        }
    }
}

impl TryFrom<Item> for Environment {
    type Error = Error;
    fn try_from(i: Item) -> Result<Self, Self::Error> {
        if let Item::Env(i) = i {
            Ok(i)
        } else {
            Err(Error::expected("environment"))
        }
    }
}

impl From<DerivedDef> for Association {
    fn from(d: DerivedDef) -> Association {
        let mut a = Association::new();
        a.insert(word_key("definition"), Item::List(d.definition.clone()));
        d.examples
            .and_then(|l| a.insert(word_key("examples"), Item::List(l.clone())));
        d.spec
            .and_then(|l| a.insert(word_key("spec"), Item::List(l.clone())));
        a
    }
}

impl From<Error> for Association {
    fn from(e: Error) -> Association {
        e.data
    }
}

impl From<DerivedDef> for Item {
    fn from(dd: DerivedDef) -> Item {
        Item::Assoc(Association::from(dd))
    }
}

impl From<AxiomDef> for Association {
    fn from(d: AxiomDef) -> Association {
        let mut a = Association::new();
        d.examples
            .and_then(|l| a.insert(word_key("examples"), Item::List(l.clone())));
        d.spec
            .and_then(|l| a.insert(word_key("spec"), Item::List(l.clone())));
        a
    }
}

impl From<Association> for DerivedDef {
    fn from(mut d: Association) -> DerivedDef {
        DerivedDef {
            word: Intern::new("".to_string()),
            serialize: true,
            definition: d
                .remove(&key_item("definition"))
                .and_then(|i| List::try_from(i).ok())
                .unwrap_or(List::new()),
            examples: d
                .remove(&key_item("examples"))
                .and_then(|i| List::try_from(i).ok()),
            spec: d
                .remove(&key_item("spec"))
                .and_then(|i| List::try_from(i).ok()),
        }
    }
}

impl From<AxiomDef> for Item {
    fn from(ad: AxiomDef) -> Item {
        Item::Assoc(Association::from(ad))
    }
}

impl From<Environment> for Association {
    fn from(env: Environment) -> Association {
        let mut a = Association::new();
        a.insert(word_key("stack"), Item::List(env.stack.clone()));
        a.insert(word_key("expression"), Item::List(env.expression.clone()));
        a.insert(word_key("dictionary"), Item::Assoc(env.dictionary.clone()));
        a
    }
}

impl From<Environment> for Item {
    fn from(env: Environment) -> Item {
        Item::Env(Environment::from(env))
    }
}

impl fmt::Debug for AxiomDef {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let mut ds = f.debug_struct("AxiomDef");
        ds.field("word", &self.word);
        ds.finish()
    }
}

pub fn word(s: &str) -> Item {
    Item::Word(Word::from(s))
}

pub fn word_key(s: &str) -> KeyItem {
    KeyItem::Word(Word::from(s))
}

pub fn to_key_item(i: Item) -> Result<KeyItem, Error> {
    match i {
        Item::Int(i) => Ok(KeyItem::Int(i)),
        Item::String(i) => Ok(KeyItem::String(i)),
        Item::List(l) => Ok(KeyItem::List(
            l.iter()
                .map(|i| to_key_item(i.clone()))
                .collect::<Result<KeyList, Error>>()?,
        )),
        Item::Word(w) => Ok(KeyItem::Word(w)),
        Item::AxiomDef(w) => Ok(KeyItem::Word(w.word)),
        Item::Boolean(b) => Ok(KeyItem::Boolean(b)),
        Item::Bytes(bs) => Ok(KeyItem::Bytes(bs)),
        Item::Nothing => Ok(KeyItem::Nothing),
        Item::DerivedDef(d) => Ok(KeyItem::Word(d.word)),
        _ => Err(Error::expected("KeyItem")),
    }
}

pub fn to_value_item(i: KeyItem) -> Item {
    match i {
        KeyItem::Int(i) => Item::Int(i),
        KeyItem::String(i) => Item::String(i),
        KeyItem::List(l) => {
            Item::List(l.iter().map(|i| to_value_item(i.clone())).collect::<List>())
        }
        KeyItem::Word(w) => Item::Word(w),
        KeyItem::Boolean(b) => Item::Boolean(b),
        KeyItem::Bytes(bs) => Item::Bytes(bs),
        KeyItem::Nothing => Item::Nothing,
    }
}

pub fn key_item(s: &str) -> KeyItem {
    to_key_item(word(s)).unwrap()
}

pub fn to_entry(i: Item) -> Result<(KeyItem, Item), Error> {
    match i {
        Item::List(mut l) => {
            if l.len() != 2 {
                Err(Error::expected("List[2]"))
            } else {
                let v = l.pop_back();
                let k = l.pop_back();
                let e = l.pop_back();
                match (k, v, e) {
                    (Some(k), Some(v), None) => Ok((to_key_item(k)?, v)),
                    _ => Err(Error::expected("List[2]")),
                }
            }
        }
        _ => Err(Error::expected("list")),
    }
}

pub fn to_hash(l: List) -> Result<Association, Error> {
    l.iter()
        .map(|i| to_entry(i.clone()))
        .collect::<Result<HashMap<KeyItem, Item>, Error>>()
}
#+end_src

Next is the top level functions, including =main=, how to evaluate
kcats ASTs, later we'll put command line options here.

#+begin_src rust :tangle src/main.rs
mod types;
use crate::types::*;
mod axiom;
mod serialize;
use std::io;
use std::io::BufRead;

fn print_result(env: Environment) {
    if env.expression.is_empty() {
        println!("\n{}", serialize::emit(&Item::List(env.stack)));
    } else {
        println!(
            "\nstack: {}\nexpression: {}",
            serialize::emit(&Item::List(env.stack)),
            serialize::emit(&Item::List(env.expression))
        )
    }
}

fn get_stdin() -> String {
    let mut buf = String::new();
    for line in io::stdin().lock().lines() {
        buf.push_str(&line.unwrap());
        buf.push('\n');
    }
    buf
}

fn main() {
    let program = get_stdin();
    let mut env = axiom::standard_env(None, None);
    let parse_result = serialize::parse(program, Some(&env.dictionary));
    match parse_result {
        Ok(program) => {
            env.expression.extend(program);
            print_result(axiom::eval(env));
        }
        Err(e) => {
            println!("Error parsing input: {:?}", e);
        }
    }
}

#[cfg(test)]
mod tests {
    // Note this useful idiom: importing names from outer (for mod tests) scope.
    use super::*;
    use internment::Intern;
    use test_case::test_case;

    pub fn get_item(i: Item, index: usize) -> Option<Item> {
        if let Item::List(l) = i {
            match l.get(index) {
                Some(x) => Some(x.clone()),
                None => None,
            }
        } else {
            None
        }
    }

    fn test_example(
        mut prog_env: Environment,
        program: List,
        expected: List,
    ) -> Option<Error> {
        let mut exp_env = prog_env.clone();
        prog_env.expression.extend(program.clone());
        exp_env.expression.extend(expected.clone());

        //let res = eval(env).ok()?;
        prog_env = axiom::eval(prog_env);
        exp_env = axiom::eval(exp_env);
        if prog_env.stack == exp_env.stack {
            None
        } else {
            println!(
                "uh oh expected {:?} got {:?}",
                exp_env.stack, prog_env.stack
            );
            Some(Error::test_assertion(program, expected, prog_env.stack))
        }
    }

    fn test_word(standard_env: Environment, w: Word) -> Vec<Error> {
        if let Some(d) = standard_env.dictionary.get(&KeyItem::Word(w)) {
            let examples = match d {
                Item::AxiomDef(a) => &a.examples,
                Item::DerivedDef(d) => &d.examples,
                _ => &None
            };
            examples
                .iter()
                .filter_map(|ex| {
                    let x = ex.get(0).unwrap().clone();
                    match (get_item(x.clone(), 0).unwrap(), get_item(x, 1).unwrap()) {
                        (Item::List(p), Item::List(exp)) => {
                            test_example(standard_env.clone(), p.clone(), exp.clone())
                        }
                        _ => Some(Error::expected("list")),
                    }
                })
                .collect::<Vec<Error>>()
        } else {
            Vec::new()
        }
    }

    #[test_case("+" ; "plus")]
    #[test_case("-" ; "minus")]
    #[test_case("=" ; "eq")]
    #[test_case(">" ; "gt")]
    #[test_case("and")]
    #[test_case("any?" ; "is_any")]
    #[test_case("assign")]
    #[test_case("association?" ; "is_association")]
    #[test_case("both?" ; "is_both")]
    #[test_case("branch")]
    #[test_case("clone")]
    #[test_case("count")]
    #[test_case("decide")]
    #[test_case("dip")]
    #[test_case("dipdown")]
    #[test_case("discard")]
    #[test_case("even?" ; "is_even")]
    #[test_case("evert")]
    #[test_case("every?" ; "is_every")]
    #[test_case("execute")]
    #[test_case("filter")]
    #[test_case("first")]
    #[test_case("float")]
    #[test_case("if")]
    #[test_case("inc")]
    #[test_case("inject")]
    #[test_case("join")]
    #[test_case("list?" ; "is_list")]
    #[test_case("lookup")]
    #[test_case("loop")]
    #[test_case("map")]
    #[test_case("not")]
    #[test_case("nothing?" ; "is_nothing")]
    #[test_case("number?" ; "is_number")]
    #[test_case("odd?" ; "is_odd")]
    #[test_case("or")]
    #[test_case("pack")]
    #[test_case("prepend")]
    #[test_case("primrec")]
    #[test_case("range")]
    #[test_case("recur")]
    #[test_case("rest")]
    #[test_case("reverse")]
    #[test_case("shield")]
    #[test_case("shielddown")]
    #[test_case("shielddowndown")]
    #[test_case("sink")]
    #[test_case("snapshot")]
    #[test_case("something?" ; "is_something")]
    #[test_case("step")]
    #[test_case("string")]
    #[test_case("string?" ; "is_string")]
    #[test_case("swap")]
    #[test_case("swapdown")]
    #[test_case("times")]
    #[test_case("type")]
    #[test_case("unpack")]
    #[test_case("unwrap")]
    #[test_case("update")]
    #[test_case("value")]
    #[test_case("while")]
    #[test_case("wrap")]
    #[test_case("zero?" ; "is_zero")]
    #[test_case("zip")]
    fn test_lexicon(word: &str) {
        let e = axiom::standard_env(None, None);
        let r = test_word(e.clone(), Intern::new(word.to_string()));
        assert!(r.is_empty(), "{:?}", r);
    }
}

// if let (Item::List(program), Item::List(expected)) = (program, expected) {

//     } else {
//         Err(Error::from("Example should be a pair"))
//     }

// for ex in d.examples().iter() {
//             let e = List::try_from(*ex).ok().unwrap();
//             let p = List::try_from(*e.get(0).unwrap()).ok().unwrap();
//             let exp = List::try_from(*e.get(1).unwrap()).ok().unwrap();

//             test_example(axiom::standard_env.clone(), w, p,exp)
//         }.retain(|i| i.is_some()).collect::<Vec<Error>>()
#+end_src

Here are the axiom functions. Some of them are just functions of the
topmost stack items, and we'll call them with =f_stack1= etc. The rest
modify the expression or dictionary and are functions of the environment.
#+begin_src rust :tangle src/axiom.rs
use super::serialize;
use crate::types::*;
use internment::Intern;
use num_integer::Roots;
use std::collections::VecDeque;
use std::fs;
use std::mem;
use std::ops::Range;
use std::rc::Rc;

type ItemResult = Result<Item, Error>;

impl From<ItemResult> for Item {
    fn from(i: ItemResult) -> Self {
        match i {
            Ok(i) => i,
            Err(e) => Item::Error(e),
        }
    }
}

fn f_stack1(f: fn(Item) -> ItemResult) -> impl Fn(Environment) -> Environment {
    move |mut env: Environment| {
        //check_stack_depth(&env, 1)?;
        let x = env.pop();
        env.push(Item::from(f(x)))
    }
}

fn f_stack2(f: fn(Item, Item) -> ItemResult) -> impl Fn(Environment) -> Environment {
    move |mut env: Environment| {
        //check_stack_depth(&env, 2)?;
        let x = env.pop();
        let y = env.pop();
        env.push(Item::from(f(y, x)))
    }
}

fn f_stack3(f: fn(Item, Item, Item) -> ItemResult) -> impl Fn(Environment) -> Environment {
    move |mut env: Environment| {
        //check_stack_depth(&env, 3)?;
        let x = env.pop();
        let y = env.pop();
        let z = env.pop();
        env.push(Item::from(f(z, y, x)))
    }
}

fn update_axiom_entries(mut d: Dictionary, updates: Vec<(&str, Rc<StepFn>)>) -> Dictionary {
    for (w, f) in updates {
        d.entry(KeyItem::Word(Word::from(w)))
            .and_modify(|e| match e {
                Item::AxiomDef(a) => {
                    a.f = f;
                }
                _ => {}
            });
    }
    d
}

pub fn add_builtins(d: Dictionary) -> Dictionary {
    update_axiom_entries(
        d,
        vec![
            ("*", Rc::new(f_stack2(mult))),
            ("+", Rc::new(f_stack2(plus))),
            ("++lookup", Rc::new(f_stack2(lookup))),
            ("-", Rc::new(f_stack2(minus))),
            ("/", Rc::new(f_stack2(div))),
            ("<", Rc::new(f_stack2(lt))),
            ("<=", Rc::new(f_stack2(lte))),
            ("=", Rc::new(f_stack2(eq))),
            (">", Rc::new(f_stack2(gt))),
            (">=", Rc::new(f_stack2(gte))),
            ("and", Rc::new(f_stack2(and))),
            ("assign", Rc::new(f_stack3(assign))),
            ("association", Rc::new(f_stack1(association))),
            ("association?", Rc::new(f_stack1(is_association))),
            ("branch", Rc::new(branch)),
            ("bytes", Rc::new(f_stack1(bytes))),
            ("clone", Rc::new(clone)),
            ("ceil", Rc::new(f_stack1(ceil))),
            ("count", Rc::new(f_stack1(count))),
            ("dec", Rc::new(f_stack1(dec))),
            ("decide", Rc::new(decide)),
            ("dip", Rc::new(dip)),
            ("dictionary", Rc::new(dictionary)),
            ("dipdown", Rc::new(dipdown)),
            ("discard", Rc::new(discard)),
            ("environment", Rc::new(f_stack1(environment))),
            ("eval-step", Rc::new(f_stack1(eval_step_outer))),
            ("evaluate", Rc::new(f_stack1(evaluate))),
            ("even?", Rc::new(f_stack1(is_even))),
            ("evert", Rc::new(evert)),
            ("execute", Rc::new(execute)),
            ("first", Rc::new(f_stack1(first))),
            ("float", Rc::new(float)),
            ("inc", Rc::new(f_stack1(inc))),
            ("join", Rc::new(f_stack2(join))),
            ("list?", Rc::new(f_stack1(is_list))),
            ("loop", Rc::new(loop_)),
            ("mod", Rc::new(f_stack2(mod_))),
            ("not", Rc::new(f_stack1(not))),
            ("number?", Rc::new(f_stack1(is_number))),
            ("odd?", Rc::new(f_stack1(is_odd))),
            ("or", Rc::new(f_stack2(or))),
            ("pack", Rc::new(f_stack2(pack))),
            ("range", Rc::new(range)),
            ("read", Rc::new(read)),
            ("recur", Rc::new(recur)),
            ("rest", Rc::new(f_stack1(rest))),
            ("resume", Rc::new(identity)),
            ("reverse", Rc::new(f_stack1(reverse))),
            ("second", Rc::new(f_stack1(second))),
            ("sink", Rc::new(sink)),
            ("sqrt", Rc::new(f_stack1(sqrt))),
            ("step", Rc::new(step)),
            ("string", Rc::new(f_stack1(string))),
            ("string?", Rc::new(f_stack1(is_string))),
            ("swap", Rc::new(swap)),
            ("swapdown", Rc::new(swapdown)),
            ("unassign", Rc::new(f_stack2(unassign))),
            ("unpack", Rc::new(unpack)),
            ("unwrap", Rc::new(unwrap)),
            ("wrap", Rc::new(wrap)),
            ("zero?", Rc::new(f_stack1(is_zero))),
        ],
    )
}

pub fn read_lexicon_file(filename: &str, mut env: Environment) -> Environment {
    match fs::read_to_string(filename) {
        Ok(s) => {
            let items = serialize::parse(s, Some(&env.dictionary)).unwrap();
            let vitems = to_hash(List::from(items)).unwrap();
            for (k, def) in vitems.into_iter() {
                let h = to_hash(List::try_from(def).unwrap()).unwrap();
                let word = as_word(k).unwrap();
                let newdef = to_lexicon_entry(word, h);
                let newdef2 = newdef.clone();
                env.dictionary
                    .entry(KeyItem::Word(word))
                    .and_modify(|e| match (e, newdef) {
                        (Item::AxiomDef(a), Item::AxiomDef(new_a)) => {
                            a.examples = new_a.examples;
                            a.spec = new_a.spec;
                        }
                        (Item::DerivedDef(d), Item::DerivedDef(new_d)) => {
                            d.examples = new_d.examples;
                            d.spec = new_d.spec;
                            d.definition = new_d.definition;
                        }
                        _ => {}
                    })
                    .or_insert(newdef2);
            }
            env
        }
        Err(_) => env.push(Item::Error(Error::undefined(Word::from("lexicon")))),
    }
}

pub fn add_standard_dictionary(env: Environment) -> Environment {
    // read builtins
    let mut env = read_lexicon_file("src/kcats/builtins.kcats", env);
    env.dictionary = add_builtins(env.dictionary);
    read_lexicon_file("src/kcats/lexicon.kcats", env)
}

pub fn invalid_type_error(asked: List) -> ItemResult {
    Err(Error::type_mismatch(asked))
}

fn number_type_error() -> ItemResult {
    invalid_type_error(crate::types::wrap(Item::Word(*S_NUMBER)))
}

pub fn plus(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Int(i + j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Float(i + j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Float(i as Float + j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Float(i + j as Float)),
        _ => number_type_error(),
    }
}

pub fn minus(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Int(i - j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Float(i - j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Float(i as Float - j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Float(i - j as Float)),
        _ => number_type_error(),
    }
}

pub fn mult(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Int(i * j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Float(i * j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Float(i as Float * j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Float(i * j as Float)),
        _ => number_type_error(),
    }
}

pub fn div(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Int(i / j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Float(i / j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Float(i as Float / j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Float(i / j as Float)),
        _ => number_type_error(),
    }
}

pub fn mod_(i: Item, j: Item) -> ItemResult {
    let i = Int::try_from(i)?;
    let j = Int::try_from(j)?;
    Ok(Item::Int(i % j))
}

pub fn inc(i: Item) -> ItemResult {
    Ok(Item::Int(Int::try_from(i)? + 1))
}

pub fn dec(i: Item) -> ItemResult {
    Ok(Item::Int(Int::try_from(i)? - 1))
}

pub fn is_zero(i: Item) -> ItemResult {
    match i {
        Item::Int(i) => Ok(Item::Boolean(i == 0)),
        Item::Float(i) => Ok(Item::Boolean(i == 0.0)),
        _ => number_type_error(),
    }
}

pub fn gt(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Boolean(i > j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Boolean(i > j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Boolean(i as Float > j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Boolean(i > j as Float)),

        _ => number_type_error(),
    }
}

pub fn lt(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Boolean(i < j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Boolean(i < j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Boolean((i as Float) < j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Boolean(i < j as Float)),

        _ => number_type_error(),
    }
}

pub fn gte(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Boolean(i >= j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Boolean(i >= j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Boolean(i as Float >= j)),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Boolean(i >= j as Float)),

        _ => number_type_error(),
    }
}

pub fn lte(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::Int(i), Item::Int(j)) => Ok(Item::Boolean(i <= j)),
        (Item::Float(i), Item::Float(j)) => Ok(Item::Boolean(i <= j)),
        (Item::Int(i), Item::Float(j)) => Ok(Item::Boolean((i as Float).le(&j))),
        (Item::Float(i), Item::Int(j)) => Ok(Item::Boolean(i <= j as Float)),

        _ => number_type_error(),
    }
}

pub fn join(i: Item, j: Item) -> ItemResult {
    match (i, j) {
        (Item::List(mut i), Item::List(j)) => {
            i.extend(j);
            Ok(Item::List(i))
        }
        (Item::String(mut i), Item::String(j)) => {
            i.push_str(&j);
            Ok(Item::String(i))
        }
        _ => invalid_type_error(serialize::to_list("[[list?] [string?]] [execute] any?")),
    }
}

pub fn pack(i: Item, j: Item) -> ItemResult {
    let mut l = List::try_from(i)?;
    l.push_back(j);
    Ok(Item::List(l))
}

pub fn clone(env: Environment) -> Environment {
    let clone = env.stack.front().unwrap().clone();
    env.push(clone)
}

fn swap2(mut env: Environment, offset: usize) -> Environment {
    env.stack.swap(offset, offset + 1);
    env
}

pub fn swap(env: Environment) -> Environment {
    swap2(env, 0)
}

pub fn swapdown(env: Environment) -> Environment {
    swap2(env, 1)
}

pub fn sink(mut env: Environment) -> Environment {
    env.stack.swap(0, 2);
    env.stack.swap(0, 1);
    env
}

pub fn float(mut env: Environment) -> Environment {
    env.stack.swap(0, 2);
    env.stack.swap(1, 2);
    env
}

pub fn discard(mut env: Environment) -> Environment {
    env.pop();
    env
}

pub fn eq(i: Item, j: Item) -> ItemResult {
    Ok(Item::Boolean(i == j))
}

pub fn count(i: Item) -> ItemResult {
    Ok(Item::Int(List::try_from(i)?.len().try_into().unwrap()))
}

pub fn is_string(i: Item) -> ItemResult {
    Ok(Item::Boolean(if let Item::String(_) = i {
        true
    } else {
        false
    }))
}

pub fn is_number(i: Item) -> ItemResult {
    Ok(Item::Boolean(if let Item::Int(_) | Item::Float(_) = i {
        true
    } else {
        false
    }))
}

pub fn is_list(i: Item) -> ItemResult {
    Ok(Item::Boolean(
        if let Item::List(_) | Item::Nothing | Item::Assoc(_) = i {
            true
        } else {
            false
        },
    ))
}

pub fn first(i: Item) -> ItemResult {
    let mut l = List::try_from(i)?;
    Ok(if let Some(i) = l.pop_front() {
        i
    } else {
        Item::Nothing
    })
}

pub fn second(i: Item) -> ItemResult {
    let mut l = List::try_from(i)?;
    l.pop_front();
    Ok(if let Some(i) = l.pop_front() {
        i
    } else {
        Item::Nothing
    })
}

pub fn loop_(mut env: Environment) -> Environment {
    let p = List::try_from(env.pop());
    match p {
        Ok(mut p) => {
            let f = env.pop();
            if is_truthy(f) {
                let p2 = p.clone();
                p.push_back(Item::List(p2));
                p.push_back(word("loop"));
                env.append_expression(p)
            } else {
                env
            }
        }
        Err(e) => env.push(Item::Error(e)),
    }
}

pub fn execute(mut env: Environment) -> Environment {
    match List::try_from(env.pop()) {
        Ok(program) => env.append_expression(program),
        Err(e) => env.push(Item::Error(e)),
    }
}

pub fn wrap(mut env: Environment) -> Environment {
    let item = env.pop();
    let mut v = List::new();
    v.push_front(item);
    env.push(Item::List(v))
}

pub fn unwrap(mut env: Environment) -> Environment {
    match List::try_from(env.pop()) {
        Ok(l) => {
            for i in l {
                env = env.push(i);
            }
            env
        }
        Err(e) => env.push(Item::Error(e)),
    }
}

pub fn dip(mut env: Environment) -> Environment {
    match List::try_from(env.pop()) {
        Ok(program) => {
            let item = env.pop();
            env.expression
                .push_front(Item::Word(Intern::new("unwrap".to_string())));
            let mut v = List::new();
            v.push_front(item);

            env.expression.push_front(Item::List(v));
            env.append_expression(program)
        }
        Err(e) => env.push(Item::Error(e)),
    }
}

pub fn dipdown(mut env: Environment) -> Environment {
    match List::try_from(env.pop()) {
        Ok(program) => {
            let item2 = env.pop();
            let item3 = env.pop();
            env.expression
                .push_front(Item::Word(Intern::new("unwrap".to_string())));
            let mut v = List::new();
            v.push_front(item2);
            v.push_front(item3);
            env.expression.push_front(Item::List(v));
            env.append_expression(program)
        }
        Err(e) => env.push(Item::Error(e)),
    }
}

pub fn unpack(mut env: Environment) -> Environment {
    // TODO: handle Nothing case

    let i = if let Some(s1) = env.stack.front_mut() {
        if let Item::List(l) = s1 {
            if let Some(i) = l.pop_front() {
                i
            } else {
                Item::Nothing
            }
        } else {
            Item::from(invalid_type_error(List::from_iter([Item::Word(*S_LIST)])))
        }
    } else {
        Item::Error(Error::stack_underflow())
    };
    env.push(i)
}

fn is_truthy(i: Item) -> bool {
    match i {
        Item::Boolean(b) => b,
        Item::Nothing => false,
        Item::List(l) => !l.is_empty(),
        _ => true,
    }
}

pub fn branch(mut env: Environment) -> Environment {
    match (List::try_from(env.pop()), List::try_from(env.pop())) {
        (Ok(false_branch), Ok(true_branch)) => {
            let b = env.pop();

            env.append_expression(if is_truthy(b) {
                true_branch
            } else {
                false_branch
            })
        }
        (Err(e), _) => env.push(Item::Error(e)),
        (_, Err(e)) => env.push(Item::Error(e)),
    }
}

pub fn step(mut env: Environment) -> Environment {
    let p = List::try_from(env.pop()).unwrap();
    let mut l = List::try_from(env.pop()).unwrap();
    if let Some(litem) = l.pop_front() {
        if !l.is_empty() {
            env.expression.push_front(word("step"));
            env.expression.push_front(Item::List(p.clone()));
            env.expression.push_front(Item::List(l));
        }
        env.expression.push_front(word("execute"));
        env.push(litem).push(Item::List(p))
    } else {
        env
    }
}

pub fn range(mut env: Environment) -> Environment {
    let to = Int::try_from(env.pop()).unwrap();
    let from = Int::try_from(env.pop()).unwrap();
    env.push(Item::List(
        (from..to).map(|i| Item::Int(i)).collect::<VecDeque<Item>>(),
    ))
}

// (effect [rec2 rec1 then pred]
//                   ['[if]
//[(concat rec1
//         [[pred then rec1 rec2 'recur]] rec2)
// then pred]])

pub fn recur(mut env: Environment) -> Environment {
    let rec2 = List::try_from(env.pop()).unwrap();
    let rec1 = List::try_from(env.pop()).unwrap();
    let then = List::try_from(env.pop()).unwrap();
    let pred = List::try_from(env.pop()).unwrap();
    env.expression.push_front(word("if"));
    let r = Item::List(List::from([
        Item::List(pred.clone()),
        Item::List(then.clone()),
        Item::List(rec1.clone()),
        Item::List(rec2.clone()),
        word("recur"),
    ]));
    let mut e = List::new();
    e.extend(rec1);
    e.push_back(r);
    e.extend(rec2);

    env.push(Item::List(pred))
        .push(Item::List(then))
        .push(Item::List(e))
}

//(fn [{[l & others] 'stack :as env}]
//            (assoc env 'stack (apply list (vec others) l)))

pub fn evert(mut env: Environment) -> Environment {
    let mut l = List::try_from(env.pop()).unwrap();
    mem::swap(&mut env.stack, &mut l);
    env.push(Item::List(l))
}

fn as_word(i: KeyItem) -> Option<Word> {
    match i {
        KeyItem::Word(w) => Some(w.clone()),
        _ => None,
    }
}

fn to_lexicon_entry(w: Word, mut def: Association) -> Item {
    //println!("{:?}", def);
    if def.get(&key_item("definition")).is_some() {
        let mut d = DerivedDef::from(def);
        d.word = w;
        Item::DerivedDef(d)
    } else {
        Item::AxiomDef(AxiomDef {
            word: w,
            serialize: true,
            examples: def
                .remove(&key_item("examples"))
                .and_then(|i| List::try_from(i).ok()),
            spec: def
                .remove(&key_item("spec"))
                .and_then(|i| List::try_from(i).ok()),
            f: Rc::new(move |env: Environment| env.push(Item::Error(Error::undefined(w)))),
        })
    }
}

fn assoc_in(i: Item, ks: &[KeyItem], v: Item) -> Result<Association, Error> {
    let mut h = Association::try_from(i)?;
    if let [k, ks @ ..] = ks {
        if ks.is_empty() {
            h.insert(k.clone(), v);
        } else {
            let inner = h.get(&k.clone()).unwrap_or(&Item::Nothing).clone();
            // if the inner value isn't a map, we're just overwriting whatever it
            // is with a new map.

            h.insert(
                k.clone(),
                Item::Assoc(assoc_in(
                    Item::Assoc(match inner {
                        Item::Assoc(inner) => inner,
                        _ => Association::new(),
                    }),
                    ks,
                    v,
                )?),
            );
        }
    }
    Ok(h)
}

pub fn assign(m: Item, ks: Item, v: Item) -> ItemResult {
    let ks = List::try_from(ks).unwrap();
    let mut ksvec = ks
        .into_iter()
        .map(|k| to_key_item(k))
        .collect::<Result<KeyList, Error>>()?;
    ksvec.make_contiguous();
    let (ks, _) = ksvec.as_slices();
    Ok(Item::Assoc(assoc_in(m, ks, v)?))
}

//TODO: this should really take a keylist like assign and lookup
pub fn unassign(m: Item, k: Item) -> ItemResult {
    let mut m = Association::try_from(m).unwrap();
    let k = to_key_item(k)?;
    m.remove(&k);
    Ok(Item::Assoc(m))
}

pub fn association(m: Item) -> ItemResult {
    match Association::try_from(m) {
        Ok(m) => Ok(Item::Assoc(m)),
        Err(e) => Err(e),
    }
}

pub fn lookup(m: Item, k: Item) -> ItemResult {
    //println!("lookup {:?} \n {:?}", m, k);
    let k = to_key_item(k)?;
    let m = Association::try_from(m)?;
    Ok(m.get(&k).unwrap_or(&Item::Nothing).clone())
}

pub fn or(i: Item, j: Item) -> ItemResult {
    Ok(Item::Boolean(is_truthy(i) || is_truthy(j)))
}

pub fn and(i: Item, j: Item) -> ItemResult {
    Ok(Item::Boolean(is_truthy(i) && is_truthy(j)))
}

pub fn not(i: Item) -> ItemResult {
    Ok(Item::Boolean(!is_truthy(i)))
}

pub fn is_association(i: Item) -> ItemResult {
    //println!("assocation? {:?}", i);
    Ok(Item::Boolean(if let Ok(_) = Association::try_from(i) {
        true
    } else {
        false
    }))
}

pub fn is_odd(i: Item) -> ItemResult {
    let i = Int::try_from(i)?;
    Ok(Item::Boolean(i & 1 == 1))
}

pub fn is_even(i: Item) -> ItemResult {
    let i = Int::try_from(i)?;
    Ok(Item::Boolean(i & 1 == 0))
}

pub fn decide(mut env: Environment) -> Environment {
    let mut clauses = List::try_from(env.pop()).unwrap();
    let clause = clauses.pop_front();
    if let Some(clause) = clause {
        if let Item::List(mut clause) = clause {
            if clause.len() != 2 {
                env.push(Item::Error(Error::list_count(2)))
            } else {
                let test = clause.pop_front().unwrap();
                let expr = clause.pop_front().unwrap();

                match (test, expr) {
                    (Item::List(test), Item::List(expr)) => {
                        // construct if
                        let testp = List::from(vec![Item::List(test), word("shield")]);
                        let elsep = List::from(vec![Item::List(clauses), word("decide")]);
                        let newexpr = List::from(vec![
                            Item::List(testp),
                            Item::List(expr),
                            Item::List(elsep),
                            word("if"),
                        ]);
                        env.append_expression(newexpr)
                    }
                    _ => env.push(Item::from(invalid_type_error(serialize::to_list(
                        "[list?] both",
                    )))),
                }
            }
        } else {
            env.push(Item::Error(Error::expected("list")))
        }
    } else {
        // clauses empty, return nothing
        env.push(Item::Nothing)
    }
}

pub fn read(mut env: Environment) -> Environment {
    let s = String::try_from(env.pop()).unwrap();
    let parsed = serialize::parse(s, Some(&env.dictionary));
    env.push(match parsed {
        Ok(l) => Item::List(l),
        Err(e) => Item::Error(e),
    })
}

fn check_type(i: &Item, w: Word) -> Result<(), Error> {
    match i {
        Item::Int(_) => {
            if w == *S_INTEGER || w == *S_NUMBER || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::List(_) => {
            if w == *S_LIST || w == *S_ITEM || w == *S_ASSOC || w == *S_PROGRAM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Boolean(_) => {
            if w == *S_BOOLEAN || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Float(_) => {
            if w == *S_FLOAT || w == *S_NUMBER || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Bytes(_) => {
            if w == *S_BYTES || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::String(_) => {
            if w == *S_STRING || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Word(_) => {
            if w == *S_WORD || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::AxiomDef(_) => {
            if w == *S_WORD || w == *S_ITEM || w == *S_ASSOC {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }

        Item::DerivedDef(_) => {
            if w == *S_WORD || w == *S_ITEM || w == *S_ASSOC {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Assoc(_) => {
            if w == *S_ASSOC || w == *S_LIST || w == *S_ITEM {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Env(_) => {
            if w == *S_ASSOC || w == *S_LIST || w == *S_ITEM || w == *S_ENVIRONMENT {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        Item::Nothing => {
            if w == *S_LIST || w == *S_ITEM || w == *S_ASSOC {
                Ok(())
            } else {
                Err(Error::expected(&w))
            }
        }
        _ => Ok(()),
    }
}

fn check_stack_depth(env: &Environment, min_depth: usize) -> Result<(), Error> {
    //println!("Checking stack has at least {} items", min_depth);
    if env.stack.len() < min_depth {
        Err(Error::stack_underflow())
    } else {
        Ok(())
    }
}

fn check_input_spec(spec: &List, env: &Environment) -> Result<(), Error> {
    let input_spec = spec.front().unwrap();
    if let Item::List(specs) = input_spec {
        check_stack_depth(env, specs.len())?;
        let indexes = Range {
            start: 0,
            end: specs.len(),
        };

        indexes
            .into_iter()
            .map(|i| {
                let item = env.stack.get(i).unwrap();
                let spec = specs.get(i).unwrap();
                match spec {
                    Item::List(named) => {
                        if let Item::Word(w) = named.get(0).unwrap() {
                            check_type(item, *w)
                        } else {
                            Err(Error::expected("list"))
                        }
                    }
                    Item::Word(w) => check_type(item, *w),
                    // the type might happen to also be a defined
                    // word, like 'association'
                    Item::AxiomDef(a) => check_type(item, a.word),
                    _ => Err(Error::expected("list")),
                }
            })
            .collect::<Result<(), Error>>()
    } else {
        Err(Error::expected("list"))
    }
}

pub fn eval_step(mut env: Environment) -> Environment {
    //println!("{:?}", env);
    let next_item = env.expression.front();

    if let Some(val) = next_item {
        match val {
            Item::Word(word) => {
                if let Some(dfn) = env.dictionary.get(&KeyItem::Word(*word)) {
                    match dfn {
                        Item::AxiomDef(d) => {
                            if let Some(spec) = &d.spec {
                                if let Err(e) = check_input_spec(&spec, &env) {
                                    env.stack.push_front(Item::Error(e));
                                    return env;
                                }
                            } else {
                                println!("No spec for {}!", word);
                            }
                            env.expression.pop_front();
                            let f = d.f.clone();

                            (f)(env)
                        }
                        Item::DerivedDef(d) => {
                            if let Some(spec) = &d.spec {
                                if let Err(e) = check_input_spec(&spec, &env) {
                                    env.stack.push_front(Item::Error(e));
                                }
                            } else {
                                println!("No spec for {}!", word);
                            }
                            env.expression.pop_front();
                            let mut items = d.definition.clone();
                            mem::swap(&mut items, &mut env.expression);
                            env.expression.extend(items);
                            env
                        }
                        _ => {
                            env.stack.push_front(Item::Error(Error::undefined(*word)));
                            env
                        }
                    }
                } else {
                    env.stack.push_front(Item::Error(Error::undefined(*word)));
                    env
                }
            }
            _ => {
                // handle the case where it's a builtin and we want to use
                // the owned value, so we pop it
                if let Item::AxiomDef(builtin) = val {
                    if let Some(spec) = &builtin.spec {
                        if let Err(e) = check_input_spec(&spec, &env) {
                            env = env.push(Item::Error(e));
                            return env;
                        }
                    }
                    let b = AxiomDef::try_from(env.expression.pop_front().unwrap()).unwrap();
                    (b.f)(env)
                } else {
                    // not a word, just push onto stack
                    env.stack.push_front(env.expression.pop_front().unwrap());
                    env
                }
            }
        }
    } else {
        env.push(Item::Error(Error::short_list(1)))
    }
}

fn reverse(i: Item) -> ItemResult {
    let l = List::try_from(i).unwrap();
    //l.make_contiguous().reverse();

    Ok(Item::List(l.into_iter().rev().collect()))
}

fn bytes(i: Item) -> ItemResult {
    match i {
        Item::String(s) => Ok(Item::Bytes(Bytes::from(s.as_bytes()))),
        i => Ok(Item::Bytes(Bytes::from(serialize::emit(&i)))),
    }
}

fn string(i: Item) -> ItemResult {
    match i {
        Item::Bytes(b) => Ok(Item::String(std::str::from_utf8(&b).unwrap().to_string())),
        i => Ok(Item::String(serialize::emit(&i))),
    }
}

fn rest(i: Item) -> ItemResult {
    let mut l = List::try_from(i).unwrap();
    l.pop_front();
    Ok(Item::List(l))
}

fn is_uncaught_error(env: &Environment) -> bool {
    if let Some(i) = env.stack.front() {
        if let Item::Error(_) = *i {
            // if the top of stack is an error we're done unless
            // there's a recovery coming. we know recovery is
            // coming if the expression has a resume
            // (after an if statement that checks whether there's
            // an error and recovers)
            !env.expression.contains(&word("resume"))
        } else {
            false
        }
    } else {
        false
    }
}

pub fn eval(mut env: Environment) -> Environment {
    loop {
        //check for error
        if is_uncaught_error(&env) {
            break;
        }
        if !env.expression.is_empty() {
            env = eval_step(env);
        } else {
            break;
        }
    }
    env
}

pub fn standard_env(program: Option<List>, stack: Option<List>) -> Environment {
    let prog_expr = match program {
        Some(p) => Stack::from(p),
        _ => Stack::new(),
    };

    let env = Environment {
        stack: stack.unwrap_or(Stack::new()),
        expression: prog_expr,
        dictionary: Dictionary::new(),
    };
    add_standard_dictionary(env)
}

fn environment(p: Item) -> ItemResult {
    let mut env = Association::try_from(p).unwrap();
    let stack = env
        .remove(&to_key_item(word("stack")).unwrap())
        .and_then(|s| List::try_from(s).ok())
        .or(Some(List::new()));
    let expression = env
        .remove(&to_key_item(word("expression")).unwrap())
        .and_then(|s| List::try_from(s).ok())
        .or(Some(List::new()));
    let dictionary = env
        .remove(&to_key_item(word("dictionary")).unwrap())
        .and_then(|d| Association::try_from(d).ok());
    let mut env = standard_env(expression, stack);
    for (k, v) in dictionary.into_iter().flatten() {
        List::try_from(v)
            .and_then(to_hash)
            .and_then(|h| {
                env.dictionary
                    .insert(k, Item::DerivedDef(DerivedDef::from(h)));
                Ok(())
            })
            .ok();
    }
    Ok(Item::Env(env))
}

pub fn eval_step_outer(env: Item) -> ItemResult {
    let inner_env = Environment::try_from(env)?;
    Ok(Item::Env(eval_step(inner_env)))
}

pub fn evaluate(env: Item) -> ItemResult {
    let inner_env = Environment::try_from(env)?;
    Ok(Item::Env(eval(inner_env)))
}

pub fn identity(env: Environment) -> Environment {
    env
}

pub fn dictionary(mut env: Environment) -> Environment {
    let d = env.dictionary.clone();
    env.stack.push_front(Item::Assoc(d));
    env
}

fn ceil(i: Item) -> ItemResult {
    let f = Float::try_from(i)?;
    Ok(Item::Float(f.ceil()))
}

fn sqrt(i: Item) -> ItemResult {
    match i {
        Item::Int(i) => Ok(Item::Int(i.sqrt())),
        Item::Float(f) => Ok(Item::Float(f.sqrt())),
        _ => Err(Error::expected("number")),
    }
}
#+end_src

Now we'll add the functions for parsing and emitting kcats source. 

#+begin_src rust :tangle src/serialize.rs
extern crate edn_format;
use crate::types::*;
use base64;
use internment::Intern;
use std::collections::VecDeque;
use std::fmt;

fn lookup_builtin(w: Word, standard_dictionary: Option<&Dictionary>) -> Item {
    if let Some(dict) = standard_dictionary {
        //println!("Looking up {} in dict of {} words", w, dict.len());
        if let Some(def) = dict.get(&KeyItem::Word(w)) {
            if let Item::AxiomDef(a) = def {
                let mut aa = a.clone();
                aa.serialize = false;
                return Item::AxiomDef(aa);
            };
        }
    }
    return Item::Word(w);
}
const BYTE_TAG: &str = "b64";


fn to_item(
    item: &edn_format::Value,
    standard_dictionary: Option<&Dictionary>,
) -> Result<Item, Error> {
    //println!("to item {:?}", item);
    match item {
        edn_format::Value::Integer(i) => Ok(Item::Int(*i)),
        edn_format::Value::Vector(v) => Ok(Item::List(
            v.iter()
                .map(|i| to_item(i, standard_dictionary))
                .collect::<Result<VecDeque<Item>, Error>>()?,
        )),
        edn_format::Value::Symbol(s) => Ok(lookup_builtin(
            Intern::new(s.name().to_string()),
            standard_dictionary,
        )),
        edn_format::Value::Boolean(b) => Ok(Item::Boolean(*b)),
        edn_format::Value::String(s) => Ok(Item::String(s.to_string())),
        edn_format::Value::Float(f) => Ok(Item::Float(f.into_inner())),
        edn_format::Value::TaggedElement(tag, e) => {
            if *tag == edn_format::Symbol::from_name(BYTE_TAG) {
                if let edn_format::Value::String(s) = &**e {
                    Ok(Item::Bytes(base64::decode(s).unwrap()))
                } else {
                    Err(Error::parse("Invalid tag datatype for byte literal"))
                }
            } else {
                Err(Error::parse("Unsupported tag"))
            }
        }
        _ => Err(Error::parse("Unsupported data literal")),
    }
}

fn from_item(item: &Item) -> edn_format::Value {
    match item {
        Item::Int(i) => edn_format::Value::Integer(*i),
        Item::List(v) => edn_format::Value::Vector(
            v.iter()
                .map(|i| from_item(i))
                .collect::<Vec<edn_format::Value>>(),
        ),
        Item::Word(w) => edn_format::Value::Symbol(edn_format::Symbol::from_name(w)),
        Item::AxiomDef(w) => edn_format::Value::Symbol(edn_format::Symbol::from_name(&w.word)),
        Item::Boolean(b) => edn_format::Value::Boolean(*b),
        Item::String(s) => edn_format::Value::String(s.to_string()),
        Item::Float(f) => edn_format::Value::from(*f),
        Item::Bytes(bs) => edn_format::Value::TaggedElement(
            edn_format::Symbol::from_name("b64"),
            Box::new(edn_format::Value::String(base64::encode(bs))),
        ),
        Item::Assoc(h) => edn_format::Value::Vector(
            h.iter()
                .map(|(k, v)| {
                    edn_format::Value::Vector(vec![
                        from_item(&to_value_item(k.clone())),
                        from_item(v),
                    ])
                })
                .collect(),
        ),
        Item::Error(h) => edn_format::Value::Vector(
            h.data
                .iter()
                .map(|(k, v)| {
                    edn_format::Value::Vector(vec![
                        from_item(&to_value_item(k.clone())),
                        from_item(v),
                    ])
                })
                .collect(),
        ),
        Item::Env(e) => edn_format::Value::Vector(vec![
            edn_format::Value::Vector(vec![
                from_item(&word("stack")),
                from_item(&Item::List(e.stack.clone())),
            ]),
            edn_format::Value::Vector(vec![
                from_item(&word("expression")),
                from_item(&Item::List(e.expression.clone())),
            ]),
            // TODO emit the non-builtin words of the dictionary
        ]),
        Item::Nothing => edn_format::Value::Vector(Vec::new()),
        Item::DerivedDef(d) => {
            if d.serialize {
                from_item(&Item::from(d.clone()))
            } else {
                from_item(&Item::Word(d.word))
            }
        }
    }
}

pub fn parse(s: String, standard_dictionary: Option<&Dictionary>) -> Result<List, Error> {
    let parser = edn_format::Parser::from_iter(s.chars(), edn_format::ParserOptions::default());
    parser
        .map(move |r| match r {
            Ok(expr) => Ok(to_item(&expr, standard_dictionary)?),
            Err(_) => Err(Error::parse("Invalid edn")),
        })
        .collect()
}

pub fn to_list(s: &str) -> List {
    parse(s.to_string(), None).unwrap()
}

pub fn emit(item: &Item) -> String {
    edn_format::emit_str(&from_item(item))
}

// print out envs in error messages
impl fmt::Debug for Environment {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "{{ stack: {}, expression: {} }}",
            emit(&Item::List(self.stack.clone())),
            emit(&Item::List(self.expression.clone())),
        )
    }
}

impl fmt::Debug for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", emit(&Item::Assoc(self.data.clone())))
    }
}
#+end_src

** Issues
*** DONE Serialization treats any tagged literal as byte string
*** DONE Serialization panics on reading invalid data
Should return Result objects from to_item. I don't think it is
necessary for from_item - since we're using a subset of edn, all Items
should be convertible to valid edn. But not all valid edn is
convertible to an Item.
*** DONE Association list and list of equal content don't compare equal
**** Description
Probably need a custom PartialEq impl for Item here that converts the
list to a hash before comparing. Return false if the item doesn't
convert.

The sticky issue here is that when we read a literal like =[[type
foo][value bar] ]=, how do we know whether it should be compared to
something else as a hashmap (that ignores order) or a plain list (that
doesn't). We can probably deduce that if one of the arguments is a
hashmap, then the other should be treated as one. However what if both
are plain lists? It's still possible the intent was hashmap.
**** Hacky Solution
what if you execute =[[a b][c d] ] [[c d][a b] ] == ? It's impossible
to know the intent. I think maybe the best way out is to treat
anything associative-shaped as association, and if the user wants
ordered comparison, let him use a different operator, =ordered== or
something.

So the comparison of two items that are either List or Assoc goes like this:

If either item is Assoc, then convert the other to Assoc (if
necessary) and do straight =.

If they're both List, compare lengths. If not equal, return
false. Otherwise, examine items- If they're all pairs, convert both to
assoc. finally do straight =.
**** Better solution
Add a word =associative=. If that follows a list, it's converted to a
hashmap and then it's easy to compare to another hashmap. The
representation is unchanged of course. But it lets the programmer
specify the intent of how === should behave.

This does reveal a problem with the unit tests that are specified as
examples in the lexicon. Those tests will execute the program and then
compare the representation of the resulting stack, with the
representation given. As we now can see, comparing representations is
insufficient, we need to be able to compare actual implementations.

That means, the unit test's expected value should be calculated and
not just read in. For most tests, no changes will be required (it's
just putting values on the stack and no further calculation needed).

But in the end we'll need to compare actual stack to expected stack,
not a stack to a representation. So the unit test logic will need to
run two environments, the actual and the expected, and then compare them.

The previous solution just isn't going to cut it - when we go to
implement sets it's going to be completely impossible to use a
heuristic to figure out what the intent was. Lists and sets will look
the same. So in the case of sets we'll have to specify the word =set=.

Do we have to be explicit when comparing list to association?  we
could either always return false (they're different types), or we
could compare them as lists or as maps.

The question then is if the two intents don't match, what do we do?  I
can't think of a reasonable answer- does order matter? We have
conflicting answer with no way to resolve it. Maybe it's safest to
just return false.

You can argue maybe even if order matters, maybe the two lists are in
the same order and should therefore compare equal. But associatives
don't have a defined order, so that would be just leaving it up to
chance and it wouldn't even be consistent across time. So that doesn't
seem wise.

So here's the plan: 
Examples:
#+begin_src kcats
[[a b] [c d]] association
[[c d] [a b]] association
=
=> true

[[a b] [c d]]
[[c d] [a b]] association
=
=> false

[[a b] [c d]]
[[a b] [c d]] association
=
=> false

[[a b] [c d]]
[[a b] [c d]]
=
=> true

[a a b c]
[a b c]
=
=> false

[a b c] set
[a b c]
=
=> false

[a b c] set
[b a c] set
=
=> true
#+end_src
*** DONE Change unit tests to make the expected take a program and eval it
This is to fix the cases that result in associatives or sets where
order doesn't matter but we don't have a way to declare how the values
should be conmpared. We can't just compare representations, we need to
compare two actual stacks.

So instead of
#+begin_src kcats
[[[[a b] [c d]] [a] 5 assign]
 [[[a 5] [c d]]]]
#+end_src

We should write
#+begin_src kcats
[[[[a b] [c d]] [a] 5 assign]
 [[[a 5] [c d]] association]]
#+end_src

So that the two stacks will compare equal.
*** TODO Interactive mode
run with =kcats -i= for interactive, where you get a repl-like
prompt. Each prompt accepts kcats items as input, and updates the
state accordingly. There are special commands to print the current
state, clear it, write to file, etc.
*** TODO Install the lexicon in the proper place
Right now it's assumed to be in the src dir, but if we move the binary
it won't be able to find the lexicon file. The build process should be
able to place it in =/usr/share/kcats= or =~/.local/share/kcats= or
whatever the proper place is. Will have to look into how cargo
normally does this sort of thing.
*** TODO Package the binary for various platforms
Would be nice to build rpms/debs etc so users can skip the nasty build
process.
*** TODO 'read' on invalid edn consumes the string argument
It should attempt to parse before popping the item off the stack.
*** DONE assign doesn't overwrite a nested value properly
#+begin_src kcats
[[a b] [c d]] association
[a e] "foo!" assign
#+end_src

#+RESULTS:
: 
: [[[c d] [a [[e "foo!"]]]]]

This errors out because =b= isn't an association. But we want it to
overwrite =b= with =[[d "foo!"] ]=.
*** DONE create an environment from data (including an existing stack)
It'd be nice to copy paste the output of one execution and have it pick up again eg
#+begin_src kcats
[[stack [1 2 3]]
 [expression [+]]]
#+end_src

There are potential issues here - such as the representation of an
associative is just a list, so when it's read back in it won't be the same:
#+begin_src kcats
[[stack [[[a b] [c d]]
         [[c d] [a b]]]]
 [expression [=]]]
#+end_src

If the two lists on the stack were actually associatives, they were
equal before but now they won't be.

I don't know that this is such a big problem, it's not possible for
everything in the language to be sensibly round-tripped via
serialization (eg stateful things like pipes).

If it's important to compare as associative, then make that part of
the expression.

What should =environment= take as an argument? Seems like it should
take an association (or assoc-shaped list).

#+begin_src kcats
[] environment
#+end_src

#+RESULTS:
: 
: [[[stack []] [expression []]]]

should give the default env.

#+begin_src kcats
[[expression [1 2 +]]] environment evaluate
#+end_src

#+RESULTS:
: 
: [[[stack [3]] [expression []]]]

should give the unexecuted env

#+begin_src kcats
[[expression [+]] [stack [3 2]]] environment evaluate [stack] lookup first
#+end_src

#+RESULTS:
: 
: [5]


should execute env with default dictionary plus whatever we add

#+begin_src kcats
[[dictionary [[foo [[definition [inc +]]
                    [spec [[number] [number]]]]]
              [bar [[definition [foo 5 *]]
                    [spec [[number] [number]]]]]]]
 [expression [1 2 bar]]]

environment evaluate
#+end_src

#+RESULTS:
: 
: [[[stack [20]] [expression []]]]

should give the default env with the additional dict entries


#+begin_src kcats
[[expression
  [21449

   [] swap 2

   [/ 2 >]
   [ [mod 0 =]
     [clone sink [pack] dipdown / 2]
     [inc]
     if]
   while

   discard pack
  ]]]
environment
advance advance advance advance advance advance
eval-step
#+end_src

#+RESULTS:
: 
: [[[stack [[[mod 0 =] [clone sink [pack] dipdown / 2] [inc] if] [/ 2 >] 2 21449 []]] [expression [swap wrap [shield] join clone dipdown join loop discard pack]]]]


#+begin_src kcats
[[expression [1 2 +]]] environment advance advance advance
#+end_src

#+RESULTS:
: 
: [[[stack [3]] [expression []]]]

#+begin_src kcats
dictionary count
#+end_src

#+RESULTS:
: 
: [118]

*** DONE In-thread error handling
**** DONE Error structs
**** DONE Stop on unrecoverable error
**** DONE Be able to resume execution after an error
***** Notes

#+begin_src kcats
2 [1 4 0] [[/] [discard 0] recover] map

[1 0 /] [discard 0] recover
1 [0 /] [discard 0] . recover
1 . snapshot
    [0 /] inject first
    [error?] [discard 0] [] if
    resume
err [error?]  

t r recover
[snapshot] dipdown ;; rec test ss
[inject] dip swap ;; res rec
[first error?] ;; err? res rec
discard execute;; drop the snapshot and run recovery
evert discard ;; use snapshot as stack


; inject the program into a snapshot. If there's an error on top
; afterward, inject the recovery in there too. It'll have access to
; the whole context. If there's no error, evert and drop the ToS.

;; the execution will stop after injecting into the snapshot, so
;; "first" won't even get executed here.

[discard] [discard] recover

;; here we recover from underflow by just dropping the error


[1 0 /] . execute
. 1 0 /
err . [discard 0] execute resume
                        ;; ^ this is in the expression so keep going, actual word doesn't do anything


;; when the ToS is err, how do we know whether to stop?  we can look
;; at the expression to see what's coming. We can't do that at every
;; step of the entire execution but we don't have to. Just when ToS =
;; err. The challenge is to encode this just with the stack/expr and
;; no extra state. We can put a word like "continue" in the expr, but
;; at some point we actually have to have an err on ToS and do
;; something with it. The only place we can put some kind of flag not
;; to abort, is in the expression (or maybe the dictionary).

;; another approach is to explicitly continue unless halt is called,
;; but the error-producer doesn't know whether the error can be
;; handled or not.


;; how to unwind. can we just naively unwind to the next instance of
;; 'recover' in the expression? or will quoted programs mess this up?
;; Let's work through it

;; here the recover is quoted, but by the time an error occurs and we
;; look at the expression, it'll be there:
2 [1 4 0] [[/ 12 +] [discard 0] recover] map

2 err . 12 + resume [error?] [discard 0] if
2 err . [error?] [discard 0] [] if 

;; so the problem is even after we've unwound the expression to
;; 'resume', the error is still on the ToS! Now we want to actually do
;; the recovery, but we've already gotten rid of the flag that tells
;; us we're doing that. Maybe we can modify the error object itself to
;; note that it's been flagged for processing. Maybe [[type error]
;; [detected? true] [message "oops"]]. Or maybe we can convert it from
;; the error object to a richer object that contains the whole
;; stack/expr at the time it happened.

;; maybe we need a primitive here: fail, which will put a new item on
;; ToS which includes the whole env field plus a message field to
;; describe what is wrong.

;; eg

1 0 /

[environment [[stack [1 0]]
              [expression [/]]
              [error "division by zero"]]]

1 0 . "division by zero" capture /

[environment [[stack [1 0]]
              [expression [/]]
              [error "division by zero"]]] . /

;; ok what's the best we got so far?

;; i think it's recover/resume, without requiring nested env. Have the
;; error type with a flag detected?. Eval will do the following: if
;; there's an error on top, and there is no 'detected?' field, unwind
;; the expression to 'resume' (if there is one, otherwise clean the
;; expression). Set the detected field and continue. presumably what's
;; next is the error handler if there's anything left in the
;; expression.

;; ok this is good but it'd be nice to know what the expression was
;; before it gets unwound. For example what if the handler wants to
;; log the error? By the time it can do that, the original word that
;; errored is not in the expression anymore. The error object would
;; have to contain a snapshot (not just of the stack, but the
;; expression too). what about snapshotting the stack and cherry
;; picking the error object before the recovery? How does the recovery
;; distinguish different types of errors (java's catch-by-class is
;; kind of weak)

;;eg

1 "foo" + 0 /

;; there's 2 things wrong here, what if we only want to recover from
;; division by zero? well, we can only wrap / in a recover. ok waht about this

"foo" 0 /

;; this will actually error with type mismatch

;; how are we supposed to serialize these things? This makes me think
;; the rust structs need to be easily representable as kcats. And then
;; what are we supposed to do with error literals (the reader would
;; need to convert them). What would error literals look like,
;; especially user-defined errors?

[[error "oh noes"]]

;; but then how to subtype them? Here we have a sort of pseudoprogram
;; that demonstrates what the interpreter couldn't do. for example [0
;; /] means it can't divide by zero. And then there's a string that
;; just says what the program can't do. eg 'number' is a word that may
;; or may not exist (I suppose it should, to do parseInt type stuff)
;; but the point is it's pseudocode that in many cases will work as
;; real code, but not guaranteed.

[[type error]
 [asked [0 /]]
 [reason "cannot divide by zero"]]

[[type error]
 [asked [number]]
 [reason "not a number"]]

[[type error]
 [asked [consume]]
 [reason "not enough items on stack"]]

[[type error]
 [asked [2 get]]
 [reason "not enough items in the list"]]

[[type error]
 [asked [bloop]]
 [reason "word is not defined"]]
#+end_src


#+begin_src kcats
[] [discard] [inject] dip
#+end_src

#+RESULTS:
: 
: stack: [[[type error] [asked [consume]] [reason "not enough items on stack"]] []]
: expression: [swap evert unpack dip evert [[discard]] unwrap]

#+begin_src kcats

[+]
[ "hello"]

           [snapshot] dipdown ;; rec test ss
           [inject] dip swap ;; res rec
           first error? ;; err? res rec
        ;;   [discard execute];; drop the snapshot and run recovery
        ;;   [evert discard] ;; use snapshot as stack
        ;;   if
          resume
#+end_src

#+RESULTS:
: 
: [false "Lookup attempted on non association value" [type] [[reason "type mismatch"] [type error] [asked [number]]] ["hello"]]


#+begin_src kcats
5 [1 2 0] [[/] [discard 0]

           [snapshot] dipdown ;; rec test ss
           [inject] dip swap ;; res rec
           [first error?] ;; err? res rec
           [discard execute];; drop the snapshot and run recovery
           [evert discard] ;; use snapshot as stack
           if
           
          ] map


#+end_src

#+RESULTS:
: 
: stack: [[[asked [association]] [type error] [reason "type mismatch"]] 5 [discard 0] 1 5]
: expression: [[count 1 =] [first first] [[type] lookup] if [error] unwrap = [[[5] [discard 0] 1 5]] unwrap evert first [[discard execute] [evert discard]] unwrap branch [[[5] [] 5]] unwrap evert first swap [pack] dip [2 0] [wrap swap clone float [[/] [discard 0] [snapshot] dipdown [inject] dip swap [first error?] [discard execute] [evert discard] if] [swap join] dip inject first swap [pack] dip] step discard]

**** Another approach
Another way to trick the interpreter into continuing execution is to
put something else on top of the stack, and then have the recovery
discard it.

This is no good because we need to actually examine the error and so
it needs to be on top.
* Notes
** Bootstrapping
+ Builtin words need to exist *before* the derived words are read from
  the lexicon - so that the words in the derivation can be replaced
  with objects that are directly callable.
+ The parser for the lexicon needs to have the prebuilt builtin
  dictionary.

  So bootstrap in 2 stages:
  + read builtins.kcats that contains just specs/docs. Build a
    Dictionary. Populate the function fields with explicit code.
  + parse lexicon.cats, using the dictionary just built, replacing
    builtin words with builtin objects (I see no need to have Builtin
    as a separate struct, just use AxiomWord)

    What about string internment? the strings in builtins file should
    get interned at parse time.
    
* Code Playground
A bunch of code snippets to test things out, org-babel makes this a
piece of cake.

#+RESULTS:
: error: Could not compile `cargoVyY4IO`.

#+begin_src rust
// test swap
use std::collections::VecDeque;
type List = Vec<Item>;

type Stack = VecDeque<i32>;
#[derive(Debug)]
enum Item {
    Int(i32),
    List(List),
}

fn main(){
    use std::mem;
    let mut x = List::new();
    x.push(Item::Int(5));
    let mut y = List::new();
    y.push(Item::Int(6));
    //x.push(Item::List(y));
    mem::swap(&mut x, &mut y);
    y.push(Item::List(x));
    println!("{:?}",y);

    let mut v = Stack::new();
    v.push_front(5);
    v.push_front(6);
    println!("{:?}", v);
}

#+end_src

#+RESULTS:
: [Int(5), List([Int(6)])]
: [6, 5]

Test hash of fn
#+begin_src rust :crates
use std::collections::HashMap;
//use std::boxed::Box;
use std::rc::Rc;

struct Env {
    number: Option<i32>,
    dict: HashMap<String, Rc<dyn Fn(Env) -> Env>>
}

fn inc(i: i32) -> i32 {
    i + 1
}

struct Builtins {
    inc: fn(i32) -> i32
}

fn make_thing(f: fn(i32) -> i32) -> impl Fn(Env) -> Env {
    move | mut e: Env | {
        if let Some(n) = e.number {
            e.number = Some(f(n));
            e
        } else { e }
        
    }
}

fn main () {
    let mut dict = HashMap::<String, Rc<dyn Fn(Env) -> Env>>::new();
    let i = make_thing(inc);
    let builtins = Builtins { inc: inc };
    dict.insert("inc".to_string(), Rc::new(i));
    let mut env = Env { number: Some(12), dict: dict };
    let f = env.dict.get(&"inc".to_string()).unwrap().clone();
    println!("{}", f(env).number.unwrap());
}
#+end_src

#+RESULTS:
: 13

#+begin_src rust
use std::boxed::Box;
struct Environment {
    stack: Vec<Box<dyn Item>>
}

struct Inc {}

trait Item {
    fn onto_stack(self, env: Environment);
}

impl Item for i32 {
    fn onto_stack(self, mut env: Environment){
        env.stack.push(Box::new(self));
    }
}

impl Item for Inc {
    fn onto_stack(self, mut env: Environment) {
        
    }
    
}
  
#+end_src

destructuring
#+begin_src rust
let a = [];
let [x, y @ ..] = a;

println!("{:?}", y);
#+end_src

#+begin_src rust
use std::collections::VecDeque;

let x = VecDeque::from(vec![1, 2, 3]);
let y = &x[0..1];

println!("{}", y);

#+end_src

#+RESULTS:
: error: Could not compile `cargoewKZ71`.

experiment with single vecdeque

#+begin_src rust
use std::collections::VecDeque;

pub struct Plus {}
pub struct Inc {}

#[derive(Debug)]
pub enum Item {
    Number(i32),
    Plus,
    Inc
}
#[derive(Debug)]
pub struct Stack {
    stack: VecDeque<Item>,
    tos: usize
}

// move from expr to stack
fn push(v: &mut Stack) {
    v.stack.rotate_left(1);
    v.tos -= 1  
}
    
fn exec2(v: &mut Stack) {

    let i = v.stack.pop_back().unwrap();
    let j = v.stack.pop_back().unwrap();
    v.stack.pop_front();
    println!("exec {:?} {:?}", i, j);
    if let (Item::Number(i), Item::Number(j)) = (i, j) {
        let res = i + j;
        v.stack.push_front(Item::Number(res));
        v.tos -= 1;
    }
}
    

fn main(){
    let mut env = Stack { stack: VecDeque::new(),
                          tos: 0 };
    // load the program
    env.stack.extend(vec![Item::Number(1), Item::Number(2), Item::Number(3), Item::Plus]);
    env.tos = 4;
    //buf.push_front(Item::Plus);

    //
    println!("{:?}", env);
    push(&mut env);
    println!("{:?}", env);
    push(&mut env);
    println!("{:?}", env);
    push(&mut env);
    println!("{:?}", env);
    exec2(&mut env);
    println!("{:?}", env);
    println!("{:?}", env.stack.front());
    

}


#+end_src

#+RESULTS:
: Stack { stack: [Number(1), Number(2), Number(3), Plus], tos: 4 }
: Stack { stack: [Number(2), Number(3), Plus, Number(1)], tos: 3 }
: Stack { stack: [Number(3), Plus, Number(1), Number(2)], tos: 2 }
: Stack { stack: [Plus, Number(1), Number(2), Number(3)], tos: 1 }
: exec Number(3) Number(2)
: Stack { stack: [Number(5), Number(1)], tos: 0 }
: Some(Number(5))

experiment with stackexpr trait
#+begin_src rust
use std::collections::VecDeque;
pub enum Item {
    Int(i32),
    Plus,
    Inc
}

pub struct Environment {
    stack: VecDeque<Item>,
}

trait StackExpr {
    fn tos(self) -> Option<&'static Item>;
    fn toe(self) -> Option<&'static Item>;
    fn pop_stack(self) -> Option<Item>;
    fn pop_expression(self) -> Option<Item>;
    fn prepend_expression(self, l: List);
    fn append_expression(self, l: List);
    fn onto_stack(self);
}

impl StackExpr for VecDeque<T> {
    fn tos(self) -> Option<&'static Item> {
        self.as_slices().
    }
    fn toe(self) -> Option<&'static Item> {
        self.stack.front()
    }
    fn pop_stack(self) -> Option<Item> {
        self.stack.pop_back()
    }
    fn pop_expression(self) -> Option<Item> {
        let item = self.stack.pop_front();
        
    }
    fn prepend_expression(self, l: List);
    fn append_expression(self, l: List);
    fn onto_stack(self);

}
#+end_src

#+RESULTS:

#+begin_src rust
use std::collections::VecDeque;

let mut vector = VecDeque::new();

vector.push_back(0);
vector.push_back(1);
vector.push_back(2);

assert_eq!(vector.as_slices(), (&[0, 1, 2][..], &[][..]));

vector.push_front(10);
vector.push_front(9);

assert_eq!(vector.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));

let mut v = VecDeque::new();
v.push_back(1);
assert_eq!(v.as_slices(), (&[1][..], &[][..]));

#+end_src

#+RESULTS:

vec to hashmap
#+begin_src rust
use std::collections::HashMap;
use std::hash::Hash;

impl<K, V> TryFrom<dyn Iterator<Item = dyn Eq>> for HashMap<K, V>
where K: Eq + Hash,
    
{
    type Error = ();

    fn try_from(v: dyn Iterator<Item = dyn Eq>) -> Result<Self, Self::Error> {
        
        HashMap::from_iter(v.map(|i| {
            if let [k,v] = i[0..2] {
                (k, v)
            }
            else {Err()}
        }))
    }
}

fn main() {
    let a = vec![1, 2];
    let b = vec![3, 4];
    let vec = vec![a, b];
    let h: HashMap<i32, i32> = HashMap::from_iter(
        vec.iter().map(|i| {
            if let [k,v] = i[0..2] {
                (k, v)
            }
            else {(0,0)}
        })
    );
    println!("{:?}", h);
}


#+end_src

#+RESULTS:
: error: Could not compile `cargo8MBNov`.

from reddit:
#+begin_src rust
use std::collections::HashMap;
use std::hash::Hash;
#[derive(Debug)]
struct NotPairsError;

fn to_hashmap<T>(v: Vec<Vec<T>>) -> Result<HashMap<T, T>,NotPairsError>
    where T: Eq + Hash,
{
    v.iter().map(|v| match (v.get(0), v.get(1), v.get(2)) {
        (Some(k), Some(v), None) => Ok((k, v)),
        _ => Err(NotPairsError),
    }).collect()
}


fn main() {
    
    let a = vec![vec!["a", "b"], vec!["c", "d"], vec![]];

    
    println!("{:?}", to_hashmap(a));
}

#+end_src

#+RESULTS:
: error: Could not compile `cargorhVTIG`.

from reddit:

#+begin_src rust :crates '((itertools . "0.10.0"))
use itertools::Itertools;

use std::collections::HashMap;

fn into_hm<I, T, V>(iter: I) -> Result<HashMap<V, V>, String>
where
    I: IntoIterator<Item = T>,
    T: IntoIterator<Item = V>,
    V: std::hash::Hash + Eq,
{
    
}

trait IntoHashMap<T> {
    fn into_hashmap(self) -> Result<HashMap<T, T>, String>;
}

impl<I, T, V> IntoHashMap<V> for I
where
    I: IntoIterator<Item = T>,
    T: IntoIterator<Item = V>,
    V: std::hash::Hash + Eq,
{
    fn into_hashmap(self) -> Result<HashMap<V, V>, String> {
        into_hm(self.into_iter())
    }
}

fn main() {
    let v = vec![vec!["k1", "v1"], vec!["k2", "v2"]];
    println!("{:#?}", v.into_hashmap());
}
#+end_src



#+RESULTS:
: error: Could not compile `cargoTmcGbz`.

edn comment bug - doesn't parse correctly when 2nd line comment in multiline
comment is at beginning of line
#+begin_src rust :crates '((edn-format . "3.2.2"))
extern crate edn_format;

fn main() {
    println!("{:?}", edn_format::parse_str(";; abc\n;; def \n\n ced"));
}
#+end_src

#+RESULTS:
: Err(ParserErrorWithContext { context: [], row: 1, col: 2, error: UnexpectedCharacter(';') })

#+begin_src rust
use std::hash::Hash;
fn into_entry<T, K, V>(k: T, v: V) -> Result<(K, V), String>
where K: Eq + Hash
{
    match k {
        
    }
}
#+end_src

#+RESULTS:

#+begin_src rust
#[derive(Debug)]
enum Value {
    Int(i32),
    Float(f32),
    String(String)
}

#[derive(Debug)]
enum Key {
    Int(i32),
    String(String)
}

fn entry(mut l: Vec<Value>) -> Result<(Key, Value), String> {
    let v = l.pop();
    let k = l.pop();
    let e = l.pop();
    match (k, v, e) {
        (Some(k), Some(v), None) => {
            match (k) {
                Value::Int(k) => { Ok((Key::Int(k), v)) }
                _ => {Err("Key is wrong type".to_string())}
            }
            
        },
        _ => { Err("Entry must be a duple".to_string()) }
    }
}
fn main(){

    let v = vec![Value::Float(1.2), Value::Float(3.12)];
    println!("{:?}", entry(v));
    
}
#+end_src

#+RESULTS:
: Err("Key is wrong type")

testing type checking dynamic?
#+begin_src rust
use std::ops::Range;
let r = Range { start: 0, end: 5 };
let x: Vec<i32> = r.into_iter().map(|i| i+1).collect();

println!("{:?}", x)
    
#+end_src

#+RESULTS:
: [1, 2, 3, 4, 5]

#+begin_src rust
use std::any::Any;

fn main(){
    let x: [&dyn Any] = [&1, ""];
}
#+end_src

#+RESULTS:
: error: Could not compile `cargo7Clegh`.
